#include "Qwidgetecgcom.h"
#include <QTimer>
#include <QDebug>
#include <QTime>

QWidgetEcgCom::QWidgetEcgCom(QWidget *parent) : QWidget(parent)
{
    QTimer* timer = new QTimer(this);
    connect(timer,&QTimer::timeout,this,&QWidgetEcgCom::ecgBpmCalc);
    timer->start(2);
}

void QWidgetEcgCom::ecgBpmCalc()
{

    static int ecg2BuffIndex = 0;
    static int ecg2Buff[]={2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2008, 2016, 2016, 2016, 2024, 2032, 2048,
                           2064, 2064, 2064, 2072, 2080, 2080, 2080, 2088, 2096, 2104,
                           2112, 2112, 2112, 2112, 2112, 2112, 2104, 2096, 2088,
                           2080, 2080, 2080, 2072, 2064, 2064, 2064, 2048, 2032, 2032,
                           2032, 2016, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 1992, 1984, 1976,
                           1968, 1960, 1952, 1944, 1936, 1944, 1952, 2016, 2080, 2136,
                           2192, 2256, 2320, 2376, 2432, 2488, 2544, 2568, 2592, 2536,
                           2480, 2424, 2368, 2304, 2240, 2184, 2128, 2072, 2016, 1968,
                           1920, 1928, 1936, 1944, 1952, 1960, 1968, 1984, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2008, 2016, 2024, 2032, 2032,
                           2032, 2048, 2064, 2064, 2064, 2072, 2080, 2088, 2096, 2104,
                           2112, 2112, 2112, 2120, 2128, 2136, 2144, 2152, 2160, 2160,
                           2160, 2160, 2160, 2168, 2176, 2176, 2176, 2184, 2192,
                           2192, 2192, 2192, 2200, 2208, 2208, 2208, 2208, 2208, 2208,
                           2208, 2200, 2192, 2192, 2192, 2184, 2176, 2176, 2176, 2168,
                           2160, 2160, 2160, 2144, 2128, 2128, 2128, 2128, 2128, 2112,
                           2096, 2088, 2080, 2072, 2064, 2064, 2064, 2048, 2032, 2024,
                           2016, 2016, 2016, 2008, 2000, 2000, 2000, 2000, 2000,
                           2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000};
    static int ecg2PulseMax = 0;
    static int ecg2PulseMid = 0;
    static int ecg2Zero = 2048;
    static int prePulse = 0;
    static int pulse = 0;
    static int pulseStart = 0;
    static int pulseEnd = 0;
    static int ecg2Period = 0;
    static int ecg2Bpm = 0;
    static int ecg2Bpm1 = 0;
    static int ecg2Bpm2 = 0;
    // 计算脉搏最高值


        if(ecg2BuffIndex >= sizeof(ecg2Buff)/sizeof(int)) // 缓冲区过大会有问题
        {
            ecg2BuffIndex = 0; // 循环缓冲区，用于计算脉搏中值
            ecg2PulseMax = 2208;
            ecg2PulseMid = (ecg2Zero + ecg2PulseMax)/2; // ecg2Zero 是已知的
        }
        // 找到脉搏
        prePulse = pulse;
        if (ecg2Buff[ecg2BuffIndex] > ecg2PulseMid)
            pulse = 1;
        else
            pulse = 0;

        // 找到脉搏上升沿中值
        if (prePulse == 0 && pulse == 1)
        {
            pulseStart = pulseEnd;
            pulseEnd = QDateTime::currentMSecsSinceEpoch();// current

            // 计算相邻2次脉搏的时间差
            // 求出心率
            ecg2Period = pulseEnd - pulseStart; //
            ecg2Bpm = (int)(60000/ecg2Period); // 每分钟脉搏数量
            if(ecg2Bpm<60)
            {
                ecg2Bpm1 = ecg2Bpm;
            }
            else
            {
                ecg2Bpm2 = ecg2Bpm;
            }
            //qDebug("BPM:%d",(ecg2Bpm2+ecg2Bpm1)/2);
            emit sendbpm((ecg2Bpm2+ecg2Bpm1)/2);
        }
        ecg2BuffIndex = ecg2BuffIndex + 1;
}

